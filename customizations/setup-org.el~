(use-package org-bullets
:ensure t
:init
(progn
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
))

  (custom-set-variables
'(org-default-notes-file (concat org-directory "/notes.org"))
'(org-directory "~/Dropbox/orgfiles")
'(org-export-html-postamble nil)
'(org-hide-leading-stars t)
'(org-startup-folded (quote overview))
'(org-startup-indented t)
   )

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "evince %s")
                  ) org-file-apps ))
 
(global-set-key "\C-ca" 'org-agenda)

(require 'ox-odt)
(use-package org-present
  :ensure t)

(global-set-key (kbd "C-c c") 'org-capture)


(setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
                             "~/Dropbox/orgfiles/i.org"
                             "~/Dropbox/orgfiles/schedule.org"))


(setq org-capture-templates
      '(("a" "Appointment" entry (file+headline  "~/Dropbox/orgfiles/gcal.org" "Appointments")
         "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
        ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
         "* Note %?\n%T")
         ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
         "* %? %^L %^g \n%T" :prepend t)
        ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org" "Blog Topics")
         "* %?\n%T" :prepend t)
        ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do Items")
         "* %?\n%T" :prepend t)

        ("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))


(defadvice org-capture-finalize 
    (after delete-capture-frame activate)  
  "Advise capture-finalize to close the frame"  
  (if (equal "capture" (frame-parameter nil 'name))  
      (delete-frame)))

(defadvice org-capture-destroy 
  (after delete-capture-frame activate)  
   "Advise capture-destroy to close the frame"  
   (if (equal "capture" (frame-parameter nil 'name))  
       (delete-frame)))  

(use-package noflet
:ensure t )
(defun make-capture-frame ()
         "Create a new frame and run org-capture."
         (interactive)
         (make-frame '((name . "capture")))
         (select-frame-by-name "capture")
         (delete-other-windows)
         (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
           (org-capture)))
